type ExchangeRate {
  exchId: ID
  date: String!
  numCode: String!
  charCode: String!
  nominal: Int!
  name: String!
  value: Float!
}

type Conversion {
  convId: ID
  convDate: String!
  nameVal1: String!
  nameVal2: String!
  curs: Float!
  sumVal: Float!
}

schema {
  query: Query
  mutation: Mutation
}

type Query {
  allExchangeRate:[ExchangeRate]
  findRateById(exchId:Long):ExchangeRate
  findRateByDate(date:String):[ExchangeRate]
}

type Mutation {
  createExchangeRate(date: String!, numCode: String!, charCode: String!, nominal: Int!, name: String!, value: Float!):ExchangeRate!
}